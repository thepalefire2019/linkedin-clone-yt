import Head from 'next/head'
import Header from '../../components/Header'
import { getSession, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import useWebSocket, { ReadyState } from 'react-use-websocket';

import ChatIcon from "@mui/icons-material/Chat";
import SendIcon from "@mui/icons-material/Send";
import { useCallback, useRef, useEffect, useState  } from 'react';


export default function Home({toEmail}) {
  
//   const socket = useRef<WebSocket | null>(null);
  const router = useRouter();
  const { status } = useSession({
        required: true,
        onUnauthenticated() {
        // The user is not authenticated, handle it here.
        router.push("/home");
        },
    });
    const { data: session } = useSession();
    const awsSocketUrl = "wss://l5ry5uejjg.execute-api.us-east-2.amazonaws.com/production";
    const [socketUrl, setSocketUrl] = useState('wss://streamer.cryptocompare.com/v2?api_key=54c69a67adfc783963d3589c5a08a40a5d619b0f22b94b1c79df9acc9129c5ff');
    const [messageHistory, setMessageHistory] = useState([]);
    const [myMessage, setMyMessage]=useState([{"type":"0","message":"hi"},{"type":"1","message":"hello!"}])
    const [newMyMessage, setNewMyMessage]= useState("");
    const {
        sendMessage,
        lastMessage,
        readyState,
        lastJsonMessage,
    } = useWebSocket(awsSocketUrl, {
        onOpen: () => {
            console.log('opened');
            console.log("Sending user id");
            // sendMessage(JSON.stringify({ action: "sendmessage", data: {event: "open_connect", userId: "eduranperez@ucdavis.edu"} })
            // sendMessage("auth:"+key)
            sendMessage(JSON.stringify(({
                "action": "setName",
                "name": session.user.email
            })))
        },
        onMessage: (mess) => {
            // console.log('this is the message in onMessage', mess)
            const data = mess.data;
            if(data){
                const recevemsg  = JSON.parse(data)
                if(recevemsg.privateMessage){
                    setMyMessage(oldArray=>[...oldArray,{"type":"1","message":recevemsg.privateMessage}])
                }
            }
        },
        onUpdate: (e) => {
            console.log('onUpdate, e', e)
        },
        onClose: () => {
            sendMessage(JSON.stringify(({
                "action": "SubRemove",
                "subs": ["5~CCCAGG~ETH~USD"]
            })))
        },
        //Will attempt to reconnect on all close events, such as server shutting down
        shouldReconnect: (closeEvent) => true,
        reconnectInterval: 1000,
        onError: (err) => {
            console.log('error connecting in webSocket', err)
        },
    });
    useEffect(() => {
        if (lastMessage !== null) {
            setMessageHistory(prev => prev.concat(lastMessage));
        }
    }, [lastMessage, setMessageHistory]);
    // const handleClickSendMessage = useCallback((s) =>{
    //     sendMessage(JSON.stringify({"action": "sendPrivate", "message": newMyMessage,"to":"sohini"}));
    //     console.log('sendMessage has been fired', newMyMessage);
    //     setNewMyMessage("")
    // }, []);

    const handleNewMessage = ()=>{
        sendMessage(JSON.stringify({"action": "sendPrivate", "message": newMyMessage,"to":toEmail}));
        console.log('sendMessage has been fired', newMyMessage);
        setMyMessage(oldArray=>[...oldArray,{"type":"0","message":newMyMessage}])
        // myMessage.push({"type":"0","message":newMyMessage})
        setNewMyMessage("")
    }
    const connectionStatus = {
        [ReadyState.CONNECTING]: 'Connecting',
        [ReadyState.OPEN]: 'Open',
        [ReadyState.CLOSING]: 'Closing',
        [ReadyState.CLOSED]: 'Closed',
        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',
    }[readyState];
    console.log(myMessage);
  return (
    <div className="bg-[#F3F2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6">
        <Head>
            <title>Feed | Linkedin</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header />
        <div className="h-screen bg-gray-300">
            <div className="flex justify-center items-center h-screen ">
                <div className="w-80 h-96 bg-white rounded shadow-2xl">
                    <nav className="w-full h-10 bg-gray-900 rounded-tr rounded-tl flex justify-between items-center">
                        <div className="flex justify-center items-center">
                            <i className="mdi mdi-arrow-left font-normal text-gray-300 ml-1"></i> 
                            <img src="https://i.imgur.com/IAgGUYF.jpg" className="rounded-full ml-1" width="25" height="25"/>
                            <span className="text-xs font-medium text-gray-300 ml-1">{toEmail}</span>
                        </div>
                        <div className="flex items-center">
                            <i className="mdi mdi-video text-gray-300 mr-4"></i>
                            <i className="mdi mdi-phone text-gray-300 mr-2"></i>
                            <i className="mdi mdi-dots-vertical text-gray-300 mr-2"></i>
                        </div>
                    </nav>
                    <div className="overflow-auto px-1 py-1" >
                        
                       
                        {myMessage.map((message, idx) => {
                            
                            return(
                                <>
                                    {message.type === "1" && (
                                        <div className="flex items-center pr-10"> 
                                            <img src="https://i.imgur.com/IAgGUYF.jpg" className="rounded-full shadow-xl" width="15" height="15" />
                                            <span className="flex ml-1 h-auto bg-gray-900 text-gray-200 text-xs font-normal rounded-sm px-1 p-1 items-end" >
                                                {message.message} 
                                                <span className="text-gray-400 pl-1" >01:25am</span>
                                            </span>
                                        </div>
                                    )}
                                    {message.type === "0" && (
                                        <div className="flex justify-end pt-2 pl-10">
                                            <span className="bg-green-900 h-auto text-gray-200 text-xs font-normal rounded-sm px-1 p-1 items-end flex justify-end " >
                                                {message.message}
                                                <span className="text-gray-400 pl-1" >02.30am</span>
                                            </span>
                                        </div>
                                    )}

                                    {message.type === "2" && (
                                        <div className="flex justify-center">
                                            <span className="text-gray-500 text-xs pt-4" >Call started at 02:33 am</span>
                                        </div>
                                    )}
                                </>
                            )
                        })}
                    </div>
                    <div className="flex justify-between items-center p-1 ">
                        <div className="relative">
                            <i className="mdi mdi-emoticon-excited-outline absolute top-1 left-1 text-gray-400" ></i>
                            <input type="text" className="rounded-full pl-6 pr-12 py-2 focus:outline-none h-auto placeholder-gray-100 bg-gray-900 text-white" 
                            placeholder="Type a message..." 
                            value={newMyMessage} 
                            onChange={e=>setNewMyMessage(e.target.value)}
                            />
                            <i className="mdi mdi-paperclip absolute right-8 top-1 transform -rotate-45 text-gray-400"></i>
                            <i className="mdi mdi-camera absolute right-2 top-1 text-gray-400"></i>
                        </div>
                        <div className="w-7 h-7 rounded-full bg-blue-300 text-center items-center flex justify-center hover:bg-gray-900 hover:text-white">
                            <i className="mdi mdi-microphone "></i>
                        </div>
                        <div className="w-7 h-7 rounded-full bg-blue-300 text-center items-center flex justify-center">
                            <button className="w-7 h-7 rounded-full text-center items-center flex justify-center focus:outline-none hover:bg-gray-900 hover:text-white"
                                onClick={handleNewMessage}
                            >
                                <SendIcon/>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
  )
}

export async function getServerSideProps(context) {
    const email = context.params.email;
    console.log(email)
    return {
      props: {
          toEmail:email
      }, // will be passed to the page component as props
    }
}